import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Random;

public class ProcessScheduler {
    public static void main(String[] args) {
        // Initialize the priority queue for long-term processes
        PriorityQueue<Process> longTermQueue = new PriorityQueue<>();

        // Generate 10 initial processes with random priorities and execution times
        Random rand = new Random();
        for (int i = 1; i <= 10; i++) {
            int priority = rand.nextInt(10) + 1; // Random priority [1-10]
            int executionTime = rand.nextInt(20) + 1; // Random execution time [1-20]
            Process process = new Process("P" + i, priority, executionTime);
            longTermQueue.add(process);
        }

        // Initialize the ready queue for short-term processes (Round Robin)
        Queue<Process> readyQueue = new PriorityQueue<>(5, (p1, p2) -> Integer.compare(p1.getPriority(), p2.getPriority()));

        // Generate and process additional 15 processes
        int totalProcessesGenerated = 10;
        while (totalProcessesGenerated < 25) {
            // Generate a new process
            int priority = rand.nextInt(10) + 1;
            int executionTime = rand.nextInt(20) + 1;
            Process newProcess = new Process("P" + (totalProcessesGenerated + 1), priority, executionTime);

            // Add the new process to the long-term queue
            longTermQueue.add(newProcess);
            totalProcessesGenerated++;

            // Move processes from long-term queue to ready queue (if needed)
            while (!longTermQueue.isEmpty() && readyQueue.size() < 5) {
                Process nextProcess = longTermQueue.poll();
                readyQueue.add(nextProcess);
            }

            // Print process information
            System.out.println("Step " + (totalProcessesGenerated - 10) + ":");
            System.out.println("The new generated process is " + newProcess);
            System.out.print("The processes in the priority queue are: ");
            for (Process p : longTermQueue) {
                System.out.print(p + " ");
            }
            System.out.print("\nThe processes in the ready queue are: ");
            for (Process p : readyQueue) {
                System.out.print(p + " ");
            }
            System.out.println("\n");
        }
    }
}

class Process implements Comparable<Process> {
    private String processId;
    private int priority;
    private int executionTime;

    public Process(String processId, int priority, int executionTime) {
        this.processId = processId;
        this.priority = priority;
        this.executionTime = executionTime;
    }

    public String getProcessId() {
        return processId;
    }

    public int getPriority() {
        return priority;
    }

    public int getExecutionTime() {
        return executionTime;
    }

    @Override
    public int compareTo(Process other) {
        return Integer.compare(this.priority, other.priority);
    }

    @Override
    public String toString() {
        return processId + ":" + priority;
    }
}
