import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Random;

/*
      Initial Comment
   a. The purpose of this program is to extend what was done in the first homework by assigning each process a unique process id
      creating a ready queue, and output of the priority queue, then printing out the process id's, as well as simulating the processor's function
   b. Ryan Meyer and Nathaniel Sullivano
   c. The program requires no outside input as the program automatically generates the inputs necessary for the program
   d. In order to use the program just compile and run it with no additional input
   e. The program expects a process object that implement the comparable interface in order to print the necessary information
   f. There are currently no issues that could happen except for the still ever so slim chance of a meteorite striking your current location

*/
public class ProcessScheduler {
    /*
     * 
     * No Necessary Pre-Inputs
     * ---
     * Expected Post Conditions / Output
     * ---
     * Step 15:
     * The new generated process is P25:2
     * The processes in the priority queue are: P24:3 P7:6 P11:8 P13:8 P2:7 P23:9 P20:10 P4:9 P9:8 P10:10 P21:7
     * The processes in the ready queue are: P25:2 P16:5 P5:5 P8:6 P3:5
     * The Process in the Processor is: P19:5
     * ---
     * 
     */
    public static void main(String[] args) {
        // Initialize the priority queue for long-term processes
        PriorityQueue<Process> longTermQueue = new PriorityQueue<>();

        // Generate 10 initial processes with random priorities and execution times
        Random rand = new Random();
        Process lastProcess = null;
        for (int i = 1; i <= 10; i++) {
            int priority = rand.nextInt(10) + 1; // Random priority [1-10]
            int executionTime = rand.nextInt(20) + 1; // Random execution time [1-20]
            Process process = new Process("P" + i, priority, executionTime);
            longTermQueue.add(process);
            lastProcess = process;
        }

        // Print step 0
        System.out.println("Step 0:");
        System.out.println("  The new generated process is " + lastProcess);
        System.out.print("  The processes in the priority queue are: ");
        for (Process p : longTermQueue) {
            System.out.print(p + " ");
        }
        System.out.print("\n  The processes in the ready queue are: ");
        System.out.println("\n  The Process in the Processor is: ");


        // Initialize the ready queue for short-term processes in the lovely in-efficient round-robin style
        Queue<Process> readyQueue = new PriorityQueue<>(5, (p1, p2) -> Integer.compare(p1.getPriority(), p2.getPriority()));

        // Initialize the "processor" - a Process that represents the process being processed
        Process Processor = null;

        // Generate and process additional 15 processes
        int totalProcessesGenerated = 10;
        while (totalProcessesGenerated < 25) {
            // Generate a new process
            int priority = rand.nextInt(10) + 1;
            int executionTime = rand.nextInt(20) + 1;
            Process newProcess = new Process("P" + (totalProcessesGenerated + 1), priority, executionTime);

            // Add the new process to the long-term queue
            longTermQueue.add(newProcess);
            totalProcessesGenerated++;

            // If a process is ready, begin processing
            if (!readyQueue.isEmpty()) {
                Processor = readyQueue.poll();
            }
            // Move processes from long-term queue to ready queue (if needed)
            if (!longTermQueue.isEmpty() && readyQueue.size() < 5) {
                Process nextProcess = longTermQueue.poll();
                readyQueue.add(nextProcess);
            }

            // Print process information
            System.out.println("Step " + (totalProcessesGenerated - 10) + ":");
            System.out.println("  The new generated process is " + newProcess);
            System.out.print("  The processes in the priority queue are: ");
            for (Process p : longTermQueue) {
                System.out.print(p + " ");
            }
            System.out.print("\n  The processes in the ready queue are: ");
            for (Process p : readyQueue) {
                System.out.print(p + " ");
            }
            if (Processor == null) {
                System.out.println("\n  The Process in the Processor is: ");
            } else {
                System.out.println("\n  The Process in the Processor is: " + Processor.toString());

                // Simulates processing with 2 ms time slice (If a process finishes in 1 ms, it will move on to the next process)
                if (Processor.getPriority() < 2) {
                    Processor.setPriority(Processor.getPriority() - 1);
                } else {
                    Processor.setPriority(Processor.getPriority() - 2);
                }

                // If the process is not yet complete, add it back to the ready queue
                if (Processor.getPriority() > 0) {
                    readyQueue.add(Processor);
                }
            }
        }
    }
}

class Process implements Comparable<Process> {
    private String processId;
    private int priority;
    private int executionTime;

    public Process(String processId, int priority, int executionTime) {
        this.processId = processId;
        this.priority = priority;
        this.executionTime = executionTime;
    }

    public String getProcessId() {
        return processId;
    }

    public int getPriority() {
        return priority;
    }

    public int getExecutionTime() {
        return executionTime;
    }

    public void setPriority(int p) {
        priority = p;
    }

    @Override
    public int compareTo(Process other) {
        return Integer.compare(this.priority, other.priority);
    }

    @Override
    public String toString() {
        return processId + ":" + priority;
    }
}
